#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT DE TEST - SYST√àME DE SURVEILLANCE LOUNA RAIL TP
¬© 2025 Ahmed Chaira - Tous droits r√©serv√©s

Teste le fonctionnement du syst√®me de surveillance
"""

import requests
import json
import time
from datetime import datetime

def test_surveillance_system():
    """Teste le syst√®me de surveillance"""
    print("üß™ TEST DU SYST√àME DE SURVEILLANCE LOUNA RAIL TP")
    print("=" * 60)
    
    # Configuration
    base_url = "http://localhost:5001"
    
    # Test 1: V√©rification de la connectivit√©
    print("1Ô∏è‚É£ Test de connectivit√©...")
    try:
        response = requests.get(f"{base_url}/api/surveillance/stats", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur de surveillance accessible")
        else:
            print(f"‚ùå Erreur serveur: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Serveur non accessible: {e}")
        print("üí° Assurez-vous que le serveur de surveillance est d√©marr√©")
        return False
    
    # Test 2: Envoi d'une violation de test
    print("2Ô∏è‚É£ Test d'envoi de violation...")
    test_violation = {
        "type": "TEST_VIOLATION",
        "sessionId": f"test_session_{int(time.time())}",
        "userAgent": "Test Browser/1.0",
        "url": "http://localhost/test",
        "timestamp": datetime.now().isoformat(),
        "details": {
            "test": True,
            "message": "Test du syst√®me de surveillance"
        }
    }
    
    try:
        response = requests.post(
            f"{base_url}/api/violation",
            json=test_violation,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("‚úÖ Violation de test envoy√©e avec succ√®s")
                print(f"   Email envoy√©: {result.get('email_sent', False)}")
            else:
                print(f"‚ùå Erreur lors de l'envoi: {result.get('error')}")
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
    
    # Test 3: R√©cup√©ration des statistiques
    print("3Ô∏è‚É£ Test des statistiques...")
    try:
        response = requests.get(f"{base_url}/api/surveillance/stats", timeout=5)
        if response.status_code == 200:
            stats = response.json()
            if stats.get('success'):
                data = stats.get('stats', {})
                print("‚úÖ Statistiques r√©cup√©r√©es:")
                print(f"   - Total violations: {data.get('total_violations', 0)}")
                print(f"   - Sessions uniques: {data.get('unique_sessions', 0)}")
                print(f"   - Violations 24h: {data.get('violations_24h', 0)}")
            else:
                print(f"‚ùå Erreur stats: {stats.get('error')}")
        else:
            print(f"‚ùå Erreur HTTP stats: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration stats: {e}")
    
    # Test 4: R√©cup√©ration des logs
    print("4Ô∏è‚É£ Test des logs...")
    try:
        response = requests.get(f"{base_url}/api/surveillance/logs?limit=5", timeout=5)
        if response.status_code == 200:
            logs = response.json()
            if logs.get('success'):
                violations = logs.get('violations', [])
                print(f"‚úÖ {len(violations)} violations r√©cup√©r√©es")
                for i, violation in enumerate(violations[:3]):
                    print(f"   {i+1}. {violation.get('type')} - {violation.get('timestamp')}")
            else:
                print(f"‚ùå Erreur logs: {logs.get('error')}")
        else:
            print(f"‚ùå Erreur HTTP logs: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration logs: {e}")
    
    print("=" * 60)
    print("üéØ Tests termin√©s")
    print("üìß V√©rifiez votre email contact@lounarailtp.com pour les alertes")
    print("üìù Consultez les logs dans logs/surveillance.log")
    
    return True

def test_email_config():
    """Teste la configuration email"""
    print("üìß TEST DE LA CONFIGURATION EMAIL")
    print("=" * 40)
    
    try:
        from dotenv import load_dotenv
        import os
        
        load_dotenv('config_surveillance.env')
        
        email = os.getenv('SURVEILLANCE_EMAIL')
        password = os.getenv('EMAIL_PASSWORD')
        
        print(f"Email: {email}")
        print(f"Mot de passe configur√©: {'‚úÖ' if password and password != 'votre_mot_de_passe_app_gmail' else '‚ùå'}")
        
        if not password or password == 'votre_mot_de_passe_app_gmail':
            print("‚ö†Ô∏è IMPORTANT: Configurez votre mot de passe Gmail dans config_surveillance.env")
            print("   Utilisez un mot de passe d'application Gmail")
        
    except Exception as e:
        print(f"‚ùå Erreur configuration email: {e}")

if __name__ == '__main__':
    print("üö® SYST√àME DE SURVEILLANCE LOUNA RAIL TP - TESTS")
    print("¬© 2025 Ahmed Chaira - Tous droits r√©serv√©s")
    print()
    
    # Test de la configuration email
    test_email_config()
    print()
    
    # Test du syst√®me de surveillance
    test_surveillance_system() 